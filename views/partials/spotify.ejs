<link rel="stylesheet" type="text/css" href="/css/spotify.css" >
<div class="col-sm-4 module-container" id="spotify-container" >
  <div id="login" style="display: none;" >
    <a href="/login" class="btn btn-primary" >Log in with Spotify</a>
  </div>
  <div id="loggedin" >
    <div id="user-profile" style="display: none;" ></div>
    <div id="no-song-status" style="display: none;" ></div>
    <div id="song-container" style="display: none;" >
      <img id="album-cover" />
      <div id="song-info" >
        <p id="song-title"></p>
        <p id="artist-name"></p>
        <%# <p id="song-status" ></p> %>
        <div >
          <span id="current-time"></span>
          <div id="song-progress" >
            <div id="song-progress-bar"></div>
          </div>
          <span id="total-time"></span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let playbackTimeout, playTimeTimeout;
  $(function() {
    function getHashParams() {
      var hashParams = {};
      var e, r = /([^&;=]+)=?([^&;]*)/g,
          q = window.location.hash.substring(1);
      while ( e = r.exec(q)) {
         hashParams[e[1]] = decodeURIComponent(e[2]);
      }
      return hashParams;
    }

    var params = getHashParams();
    var error = params.error,
      access_token = "", refresh_token = "";


    function getCookies() {
      var cookies = decodeURIComponent(document.cookie).split("; ");
      for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i].split("=");
        var cookieName = cookie[0];
        if (cookieName === "refresh_token") {
          refresh_token = cookie[1];
        } else if (cookieName = "access_token") {
          access_token = cookie[1];
        }
      }
    }

    getCookies();
    console.log('access_token: ', access_token);
    console.log('refresh_token: ', refresh_token);
    
    if (access_token) {
      // getUserInfo();
      getCurrentSongInfo();
      $("#stop-song-timeout").on("click", stopTimeout);
    } else {
        // render initial screen
        $('#login').show();
        $('#loggedin').hide();
    }

    function getCurrentSongInfo() {
      console.log("current song");
      $.ajax({
        url: '/currentSong',
        data: {
          access_token: access_token
        },
        success: function(response, textStatus, xhr) {
          let status = xhr.status;
          if (status == 200) {
            let data = response.data;
            let item = data.item;
            let albumImage = item.album.images[1];
            let artists = item.artists;
            $("#album-cover").attr({"src": albumImage.url, "width": albumImage.width-50, "height": albumImage.height-50});
            $("#song-title").text(item.name);
            $("#artist-name").empty();
            for (let aCount = 0; aCount < artists.length; aCount++) {
              let artist = artists[aCount];
              let artistA = "<a href=\"" + artist.external_urls.spotify + "\">" + artist.name + "</a>";
              if (aCount < artists.length - 1) {
                artistA += ", ";
              }
              $("#artist-name").append(artistA);
            }
            $("#song-status").text(data.is_playing ? "Playing" : "Paused" );
            $("#song-progress-bar").css("width", "" + (data.progress_ms * 100) / item.duration_ms + "%");
            $("#total-time").text(convertMsToMin(item.duration_ms));
            $("#current-time").text(convertMsToMin(data.progress_ms));
            updateTime(data.progress_ms, item.duration_ms);
            if (!data.is_playing && playTimeTimeout) {
              clearTimeout(playTimeTimeout);
            }
            $("#song-container").show();
            playbackTimeout = setTimeout(getCurrentSongInfo, 5000);
          } else if (status == 204) {
            $("#no-song-status").text("No song is currently playing.").show();
            stopTimeout();
          } else {
            stopTimeout(); 
          }
        },
        error: function() {
          $('#login').show();
          $('#loggedin').hide();
        }
      });
    }

    function updateTime(ms, total) {
      if (playTimeTimeout) {
        clearTimeout(playTimeTimeout);
      } 
      if (ms != total) {
        playTimeTimeout = setTimeout(function () {
          ms += 1000;
          $("#current-time").text(convertMsToMin(ms));
          $("#song-progress-bar").css("width", "" +  ms * 100 / total + "%");
          updateTime(ms, total);
        }, 1000);
      }
    }

    function convertMsToMin(msTime) {
      let minutes = Math.floor(msTime / 60000);
      let seconds = ((msTime % 60000) / 1000).toFixed(0);
      if (seconds >= 60) {
        seconds = 0;
        minutes++;
      }
      return minutes + ":" + (seconds < 10 ? "0" : "") + seconds;
    }

    function getUserInfo() {
      $.ajax({
        url: '/currentUser',
        data: {
          access_token: access_token
        },
        success: function(response, textStatus, xhr) {
          let status = xhr.status;
          console.log('user response: ', response);
          $('#login').hide();
          $('#loggedin').show();
          if (status == 200) {

          } else if (status == 204) {

          } else {
            
          }
        }
      });
    }

    function stopTimeout() {
      if (playbackTimeout) {
        clearTimeout(playbackTimeout);
      }
      if (playTimeTimeout) {
        clearTimeout(playTimeTimeout);
      }
    }

  });

</script>