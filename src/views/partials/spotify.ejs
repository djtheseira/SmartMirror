<div class="col-sm-8 module-container" id="spotify-container" >
  <div id="login" style="display: none;" >
    <p>Please allow access to your spotify account for this app to work.</p>
    <a class="btn btn-primary" id="verify-spotify" >Connect to Spotify</a>
  </div>
  <div id="loggedin" >
    <div id="user-profile" style="display: none;" ></div>
    <div id="no-song-status" style="display: none;" ></div>
    <div id="song-container" style="display: none;" >
      <img id="album-cover" />
      <div id="song-info" >
        <p id="song-title"></p>
        <p id="artist-name"></p>
        <div >
          <span id="current-time"></span>
          <div id="song-progress" >
            <div id="song-progress-bar"></div>
          </div>
          <span id="total-time"></span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let playbackTimeout, playTimeTimeout;
  let spotifyVerifyWindow;
  let spotifyInterval;
  let firstLoadSpotify = true;
  let access_token = "", refresh_token = "";
  $(function() {
    if ($(window).width() > 767) {
      function getHashParams() {
        var hashParams = {};
        var e, r = /([^&;=]+)=?([^&;]*)/g,
            q = window.location.hash.substring(1);
        while ( e = r.exec(q)) {
           hashParams[e[1]] = decodeURIComponent(e[2]);
        }
        return hashParams;
      }

      var params = getHashParams();
      var error = params.error;


      function getCookies() {
        var cookies = decodeURIComponent(document.cookie).split("; ");
        for (var i = 0; i < cookies.length; i++) {
          var cookie = cookies[i].split("=");
          var cookieName = cookie[0];
          var cookieValue = cookie[1];
          if (cookieName === "refresh_token" && cookieValue && cookieValue.length > 0 ) {
            refresh_token = cookieValue;
          } else if (cookieName === "access_token" && cookieValue && cookieValue.length > 0) {
            access_token = cookieValue;
          }
        }
      }

      getCookies();
      
      if (access_token && refresh_token) {
        // getUserInfo();
        getCurrentSongInfo();
        $("#stop-song-timeout").on("click", stopTimeout);
      } else if (!access_token && refreshToken) {
        refreshToken();
      } else {
        getAuthUrl();
      }

      function getAuthUrl() {
        spotifyVerifyWindow = window.open("/login", '_blank', 'toolbar=0,status=0,width=626,height=700,top=100,left=100');
        spotifyInterval = setInterval(checkSpotifyWindow, 500);
      }

      function checkSpotifyWindow() {
        if (spotifyVerifyWindow.closed) {
          clearInterval(spotifyInterval);
          getCookies();
          if (access_token && refresh_token) {
            getCurrentSongInfo();
            $('#loggedin').show();
            $('#login').hide();
          } else {
            $("#verify-spotify").on("click", getAuthUrl);
            $('#loggedin').hide();
            $('#login').show();
            doneLoading++;
          }
        }
      }

      function refreshToken() {
        $.ajax({
          url: "/refreshToken",
          data: {
            refresh_token: refresh_token
          },
          success: getCurrentSongInfo,
          error: getAuthUrl
        });
      }

      function getCurrentSongInfo() {
        getCookies();
        if (!access_token) {
          refreshToken();
          return;
        } else if (!access_token && !refresh_token) {
          checkSpotifyWindow();
          return ;
        }
        $.ajax({
          url: '/currentSong',
          data: {
            access_token: access_token
          },
          success: function(response, textStatus, xhr) {
            let status = xhr.status;
            if (status == 200) {
              let data = response.data;
              let item = data.item;
              let albumImage = item.album.images[1];
              let artists = item.artists;
              $("#album-cover").attr({"src": albumImage.url, "width": albumImage.width + 50, "height": albumImage.height + 50});
              $("#song-title").text(item.name);
              $("#artist-name").empty();
              for (let aCount = 0; aCount < artists.length; aCount++) {
                let artist = artists[aCount];
                let artistA = "<a href=\"" + artist.external_urls.spotify + "\">" + artist.name + "</a>";
                if (aCount < artists.length - 1) {
                  artistA += ", ";
                }
                $("#artist-name").append(artistA);
              }
              $("#song-status").text(data.is_playing ? "Playing" : "Paused" );
              $("#song-progress-bar").css("width", "" + (data.progress_ms * 100) / item.duration_ms + "%");
              $("#total-time").text(convertMsToMin(item.duration_ms));
              $("#current-time").text(convertMsToMin(data.progress_ms));
              updateTime(data.progress_ms, item.duration_ms);
              if (!data.is_playing && playTimeTimeout) {
                clearTimeout(playTimeTimeout);
              }
              $("#song-container").show();
              let timeoutTime = item.duration_ms - data.progress_ms  > 5000 ? 5000 : item.duration_ms - data.progress_ms;
              playbackTimeout = setTimeout(getCurrentSongInfo, timeoutTime);
            } else {
              stopTimeout(); 
            }
            if (firstLoadSpotify) {
              firstLoadSpotify = false;
              doneLoading++;
            }
          },
          error: function() {
            if (access_token && refresh_token) {
              playbackTimeout = setTimeout(getCurrentSongInfo, 5000);
            } else {
              $('#login').show();
              $('#loggedin').hide();
              getAuthUrl();
            }
          }
        });
      }

      function updateTime(ms, total) {
        if (playTimeTimeout) {
          clearTimeout(playTimeTimeout);
        } 
        if (ms != total) {
          playTimeTimeout = setTimeout(function () {
            ms += 1000;
            $("#current-time").text(convertMsToMin(ms));
            $("#song-progress-bar").css("width", "" +  ms * 100 / total + "%");
            updateTime(ms, total);
          }, 1000);
        }
      }

      function convertMsToMin(msTime) {
        let minutes = Math.floor(msTime / 60000);
        let seconds = ((msTime % 60000) / 1000).toFixed(0);
        if (seconds >= 60) {
          seconds = 0;
          minutes++;
        }
        return minutes + ":" + (seconds < 10 ? "0" : "") + seconds;
      }

      function stopTimeout() {
        if (playbackTimeout) {
          clearTimeout(playbackTimeout);
        }
        if (playTimeTimeout) {
          clearTimeout(playTimeTimeout);
        }
      }
    }
  });

</script>